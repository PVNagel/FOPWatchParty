@page "/userprofile"
@using System.Security.Claims
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using ClassLibrary.Models;
@using System.Globalization;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject NavigationManager navigation

<h1>@GetUserName()</h1>

<div class="user-profile">
    <div class="profile-picture">
        <img src="@GetProfilePictureUrl()" alt="Profile Picture" />
    </div>
</div>

<h2>Movies Marked as Interested</h2>
@if (userInterestedMovies == null)
{
    <p><em>Loading...</em></p>
}

else
{
    <table class="table">
        <thead>
            <tr>
                <th @onclick="@(() => SortMoviesBy("Title"))">
                    Title @RenderSortIcon("Title")
                </th>
                <th @onclick="@(() => SortMoviesBy("Released"))">
                    <div class="header-content">
                        Released
                        <span class="sort-icon">@RenderSortIcon("Released")</span>
                    </div>
                </th>
                <th>Genre</th>
                <th>Director</th>
                <th>Actors</th>
                <th @onclick="@(() => SortMoviesBy("IMDb"))">
                    <div class="header-content">
                        IMDb
                        <span class="sort-icon">@RenderSortIcon("IMDb")</span>
                    </div>
                </th>
                <th @onclick="@(() => SortMoviesBy("Runtime"))">
                    <div class="header-content">
                        Runtime
                        <span class="sort-icon">@RenderSortIcon("Runtime")</span>
                    </div>
                </th>
                <th @onclick="@(() => SortMoviesBy("BoxOffice"))">
                    <div class="header-content">
                        Box Office
                        <span class="sort-icon">@RenderSortIcon("BoxOffice")</span>
                    </div>
                </th>
                <th>Awards</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in userInterestedMovies)
            {
                <tr>
                    <td class="movie-title" @onclick="() => MovieDetails(entry.Movie)">@entry.Movie.Title</td>
                    <td>@entry.Movie.Released</td>
                    <td>@entry.Movie.Genre</td>
                    <td>@entry.Movie.Director</td>
                    <td>@entry.Movie.Actors</td>
                    <td>@entry.Movie.imdbRating/10 <br />(@entry.Movie.imdbVotes)</td>
                    <td>@entry.Movie.Runtime</td>
                    <td>@entry.Movie.BoxOffice</td>
                    <td>@entry.Movie.Awards</td>
                    <td @onclick="() => MovieDetails(entry.Movie)">
                        @if (@entry.Movie.Poster == "N/A")
                        {
                            <img src="https://i.imgur.com/l1wt1eN.jpg" alt="Default Movie Poster" width="200" height="300" />
                        }
                        else
                        {
                            <img src="@entry.Movie.Poster" alt="Movie Poster" width="200" height="300" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ClaimsPrincipal user;
    private List<FopUserWatchlist> userInterestedMovies;
    private string? sortBy;
    private bool sortAsc = false;

    // This method is called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    // This method is called when parameters are set or changed
    protected override async Task OnParametersSetAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        // Retrieve the user information
        user = (ClaimsPrincipal) AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User;

        if (user != null)
        {
            // Call API to add user
            await AddUserToDb();
            // Fetch user's watchlist
            await FetchUserWatchlist();
        }
    }

    private async Task AddUserToDb()
    {
        var sub = user.FindFirst("sub")?.Value;
        var name = user.FindFirst("name")?.Value;
        var pictureUrl = user.FindFirst("picture")?.Value;
        var givenName = user.FindFirst("given_name")?.Value;
        var familyName = user.FindFirst("family_name")?.Value;

        var userData = new
        {
            Sub = sub,
            Name = name,
            PictureUrl = pictureUrl,
            GivenName = givenName,
            FamilyName = familyName
        };

        // Make the API request to add the user
        var response = await HttpClient.PostAsJsonAsync("https://localhost:7055/api/Users/add-user", userData);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("User added successfully.");
        }
        else
        {
            Console.WriteLine($"Failed to add user. Status code: {response.StatusCode}");
        }
    }

    private async Task FetchUserWatchlist()
    {
        try
        {
            var sub = user.FindFirst("sub")?.Value;
            var fullUserWatchlist = await HttpClient.GetFromJsonAsync<List<FopUserWatchlist>>($"https://localhost:7055/api/watchlist/getuserwatchlist?sub={sub}");

            if (fullUserWatchlist != null)
            {
                // Filter movies where IsInterested is true
                userInterestedMovies = fullUserWatchlist.Where(entry => entry.IsInterested).ToList();

                // Fetch movie details for each entry in the filtered watchlist
                foreach (var entry in userInterestedMovies)
                {
                    entry.Movie = await FetchMovieDetails(entry.MovieId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user watchlist: {ex.Message}");
        }
    }


    private async Task<Movie> FetchMovieDetails(int movieId)
    {
        try
        {
            // Fetch movie details using the movieId
            return await HttpClient.GetFromJsonAsync<Movie>($"https://localhost:7055/api/movies/{movieId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movie details: {ex.Message}");
            return null;
        }
    }

    private void SortMoviesBy(string attribute)
    {
        if (userInterestedMovies == null)
        {
            return;
        }

        if (sortBy == attribute)
        {
            // Toggle sorting order if the same attribute is clicked again
            sortAsc = !sortAsc;
        }
        else
        {
            // Change sorting attribute and set ascending order by default
            sortBy = attribute;
            sortAsc = false;
        }

        // Perform sorting based on the selected attribute
        switch (attribute)
        {
            case "Title":
                userInterestedMovies = sortAsc ? userInterestedMovies.OrderByDescending(m => m.Movie.Title).ToList()
                                    : userInterestedMovies.OrderBy(m => m.Movie.Title).ToList(); break;
            case "Released":
                userInterestedMovies = sortAsc ? userInterestedMovies.OrderBy(m => ConvertToDateTime(m.Movie.Released)).ToList()
                                    : userInterestedMovies.OrderByDescending(m => ConvertToDateTime(m.Movie.Released)).ToList(); break;
            case "IMDb":
                userInterestedMovies = sortAsc ? userInterestedMovies.OrderBy(m => RatingNotAvailableCheck(m.Movie.imdbRating)).ToList()
                                    : userInterestedMovies.OrderByDescending(m => RatingNotAvailableCheck(m.Movie.imdbRating)).ToList(); break;
            case "Runtime":
                userInterestedMovies = sortAsc ? userInterestedMovies.OrderBy(m => GetRuntimeInMinutes(m.Movie.Runtime)).ToList()
                                    : userInterestedMovies.OrderByDescending(m => GetRuntimeInMinutes(m.Movie.Runtime)).ToList(); break;
            case "BoxOffice":
                userInterestedMovies = sortAsc ? userInterestedMovies.OrderBy(m => ConvertToBoxOfficeValue(m.Movie.BoxOffice)).ToList()
                                    : userInterestedMovies.OrderByDescending(m => ConvertToBoxOfficeValue(m.Movie.BoxOffice)).ToList(); break;
        }
        InvokeAsync(StateHasChanged);
    }



    private string RatingNotAvailableCheck(string imdbRating)
    {
        // Treat "N/A" as the lowest value
        if (imdbRating == "N/A")
        {
            return "0.0";
        }
        return imdbRating;
    }

    private DateTime ConvertToDateTime(string dateString)
    {
        if (DateTime.TryParseExact(dateString, "dd MMM yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result))
        {
            return result;
        }
        // Return DateTime.MinValue if parsing fails
        return DateTime.MinValue;
    }

    private int GetRuntimeInMinutes(string runtime)
    {
        // Extract the numerical part of the runtime string and convert it to an integer
        if (int.TryParse(new string(runtime.Where(char.IsDigit).ToArray()), out int minutes))
        {
            return minutes;
        }
        return 0; // Return 0 if parsing fails
    }

    private static long ConvertToBoxOfficeValue(string boxOffice)
    {
        if (string.IsNullOrWhiteSpace(boxOffice))
        {
            return 0;
        }

        // Remove non-numeric characters and parse the value
        if (long.TryParse(boxOffice.Replace("$", "").Replace(",", ""), out var result))
        {
            return result;
        }

        return 0;
    }

    private string RenderSortIcon(string column)
    {
        if (sortBy == column)
        {
            return sortAsc ? "🔼" : "🔽"; // Up arrow for ascending, down arrow for descending
        }
        return string.Empty;
    }

    private void MovieDetails(Movie movie)
    {
        navigation.NavigateTo($"/moviepage/{movie.imdbID}");
    }

    private string GetUserName()
    {
        // Retrieve the user's name from claims
        var nameClaim = user?.FindFirst("name");
        return nameClaim?.Value ?? "Name not found";
    }

    private string GetProfilePictureUrl()
    {
        // Retrieve the user's profile picture URL from claims
        var pictureClaim = user?.FindFirst("picture");
        return pictureClaim?.Value ?? string.Empty;
    }

    
}
