@page "/watchlist"
@using ClassLibrary.Models;
@inject HttpClient httpClient
@inject NavigationManager Navigation

<link rel="stylesheet" href="/css/watchlist.css" />

<h1>Watchlist</h1>

@if (moviesToWatch == null)
{
    <p><em>The movie watchlist is currently empty!</em></p>
}
else
{
    @if (moviesToWatch.Count == 0)
    {
        <p>Loading...</p>
    }

    @if (moviesToWatch.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th></th>
                    <th>Year</th>
                    <th>Director</th>
                    <th>Actors</th>
                    <th>IMDb rating</th>
                    <th>Awards</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var movie in moviesToWatch)
                {
                    <tr>
                        <td class="movie-link" @onclick="() => MovieDetails(movie)">
                            <strong style="font-size: 18px;">@movie.Title</strong>
                        </td>
                        <td><img src="@movie.Poster" alt="Movie Poster" width="100" height="150" /></td>
                        <td>@movie.Year</td>
                        <td>@movie.Director</td>
                        <td>@movie.Actors</td>
                        <td>@movie.imdbRating / 10<br/>(@movie.imdbVotes)</td>
                        <td>@movie.Awards</td>
                        <td>
                            <div class="button-container">
                                <button class="action-button" @onclick="() => MarkAsWatched(movie)">Watched</button>
                                <button class="action-button" @onclick="async () => RemoveFromWatchlist(movie)">Remove</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    }
}

@code {
    private Movie? movie;
    private List<Movie>? moviesToWatch = new List<Movie>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            moviesToWatch = await httpClient.GetFromJsonAsync<List<Movie>>($"https://localhost:7055/api/watchlist/get");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching watchlist: {ex.Message}");
        }
    }

    private void MarkAsWatched(Movie movie)
    {
        // Implement logic to remove the movie from the watch list and add to watched list
    }

    private async Task RemoveFromWatchlist(Movie movie)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"https://localhost:7055/api/watchlist/remove?imdbID={movie.imdbID}");

            if (response.IsSuccessStatusCode)
            {
                moviesToWatch.Remove(movie);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error adding movie to the watchlist. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding movie to the watchlist: {ex.Message}");
        }
    }

    private void MovieDetails(Movie movie)
    {
        Navigation.NavigateTo($"/moviepage/{movie.imdbID}");
    }
}