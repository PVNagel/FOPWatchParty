@page "/watchlist"

@using System.Globalization
@inject HttpClient httpClient
@inject NavigationManager navigation

<h1>Watchlist</h1>

<h2 class="filter-heading">Filter movies</h2>

<form class="filter-form" @onsubmit="@(async () => await FilterMovies(filterYear, filterGenre, filterActor, filterDirector))">
    <InputText id="year" @bind-Value="filterYear" placeholder="Year" />
    <InputText id="director" @bind-Value="filterDirector" placeholder="Director" />
    <InputText id="actor" @bind-Value="filterActor" placeholder="Actor" />
    <select id="genre" @bind="filterGenre">
        <option value="">Genre</option>
        <option value="Action">Action</option>
        <option value="Adventure">Adventure</option>
        <option value="Biography">Biography</option>
        <option value="Comedy">Comedy</option>
        <option value="Crime">Crime</option>
        <option value="Drama">Drama</option>
        <option value="Documentary">Documentary</option>
        <option value="Family">Family</option>
        <option value="Fantasy">Fantasy</option>
        <option value="History">History</option>
        <option value="Sci-Fi">Sci-Fi</option>
        <option value="Sport">Sport</option>
    </select>
    <button type="submit" class="filter-button">Apply filter</button>
    <button type="reset" class="clear-filter-button" @onclick="ResetFilter">Clear filter</button>
</form>

@if (moviesToWatch == null)
{
    <p><em>Loading...</em></p>
}

else
{
    <table class="table">
        <thead>
            <tr>
                <th @onclick="@(() => SortMoviesBy("Title"))">
                    Title @RenderSortIcon("Title")
                </th>
                <th @onclick="@(() => SortMoviesBy("Released"))">
                    <div class="header-content">
                        Released
                        <span class="sort-icon">@RenderSortIcon("Released")</span>
                    </div>
                </th>
                <th>Genre</th>
                <th>Director</th>
                <th>Actors</th>
                <th @onclick="@(() => SortMoviesBy("IMDb"))">
                    <div class="header-content">
                        IMDb
                        <span class="sort-icon">@RenderSortIcon("IMDb")</span>
                    </div>
                </th>
                <th @onclick="@(() => SortMoviesBy("Runtime"))">
                    <div class="header-content">
                        Runtime
                        <span class="sort-icon">@RenderSortIcon("Runtime")</span>
                    </div>
                </th>
                <th @onclick="@(() => SortMoviesBy("BoxOffice"))">
                    <div class="header-content">
                        Box Office
                        <span class="sort-icon">@RenderSortIcon("BoxOffice")</span>
                    </div>
                </th>
                <th>Awards</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in moviesToWatch)
            {
                <tr>
                    <td class="movie-title" @onclick="() => MovieDetails(movie)">@movie.Title</td>
                    <td>@movie.Released</td>
                    <td>@movie.Genre</td>
                    <td>@movie.Director</td>
                    <td>@movie.Actors</td>
                    <td>@movie.imdbRating/10 <br />(@movie.imdbVotes)</td>
                    <td>@movie.Runtime</td>
                    <td>@movie.BoxOffice</td>
                    <td>@movie.Awards</td>
                    <td @onclick="() => MovieDetails(movie)">
                        @if (movie.Poster == "N/A")
                        {
                            <img src="https://i.imgur.com/l1wt1eN.jpg" alt="Default Movie Poster" width="200" height="300" />
                        }
                        else
                        {
                            <img src="@movie.Poster" alt="Movie Poster" width="200" height="300" />
                        }
                    </td>
                    <td>
                        <div class="button-container">
                            <button class="MoveToWatched-button" @onclick="() => GoToRatingsPage(movie)">Watched</button>
                            <button class="RemoveFromWatchlist-button" @onclick="() => RemoveFromWatchlist(movie)">Remove</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Movie? movie;
    private List<Movie>? moviesToWatch;
    private string? sortBy;
    private bool sortAsc = false;

    private string? filterYear;
    private string? filterGenre;
    private string? filterActor;
    private string? filterDirector;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            moviesToWatch = await httpClient.GetFromJsonAsync<List<Movie>>($"https://localhost:7055/api/watchlist/get");

            if (moviesToWatch != null && moviesToWatch.Any())
            {
                SortMoviesBy("IMDb");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching watchlist: {ex.Message}");
        }
    }

    private async Task FilterMovies(string year, string genre, string actor, string director)
    {
        try
        {
            moviesToWatch = await httpClient.GetFromJsonAsync<List<Movie>>($"https://localhost:7055/api/watchlist/get?year={year}&genre={genre}&actor={actor}&director={director}");
            SortMoviesBy("IMDb");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching filtered movie data: {ex.Message}");
        }
    }

    private async Task ResetFilter()
    {
        moviesToWatch = await httpClient.GetFromJsonAsync<List<Movie>>("https://localhost:7055/api/watchlist/get");

        if (moviesToWatch != null && moviesToWatch.Any())
        {
            SortMoviesBy("IMDb");
        }
    }

    private async Task GoToRatingsPage(Movie movie)
    {
        navigation.NavigateTo($"/fopratingspage/{movie.imdbID}");
    }

    private async Task RemoveFromWatchlist(Movie movie)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"https://localhost:7055/api/watchlist/remove?imdbID={movie.imdbID}");

            if (response.IsSuccessStatusCode)
            {
                moviesToWatch.Remove(movie);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error adding movie to the watchlist. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding movie to the watchlist: {ex.Message}");
        }
    }

    private void SortMoviesBy(string attribute)
    {
        if (sortBy == attribute)
        {
            // Toggle sorting order if the same attribute is clicked again
            sortAsc = !sortAsc;
        }
        else
        {
            // Change sorting attribute and set ascending order by default
            sortBy = attribute;
            sortAsc = false;
        }

        // Perform sorting based on the selected attribute
        switch (attribute)
        {
            case "Title":
                moviesToWatch = sortAsc ? moviesToWatch.OrderByDescending(m => m.Title).ToList()
                                        : moviesToWatch.OrderBy(m => m.Title).ToList(); break;
            case "Released":
                moviesToWatch = sortAsc ? moviesToWatch.OrderBy(m => ConvertToDateTime(m.Released)).ToList()
                                        : moviesToWatch.OrderByDescending(m => ConvertToDateTime(m.Released)).ToList(); break;
            case "IMDb":
                moviesToWatch = sortAsc ? moviesToWatch.OrderBy(m => RatingNotAvailableCheck(m.imdbRating)).ToList()
                                        : moviesToWatch.OrderByDescending(m => RatingNotAvailableCheck(m.imdbRating)).ToList(); break;
            case "Runtime":
                moviesToWatch = sortAsc ? moviesToWatch.OrderBy(m => GetRuntimeInMinutes(m.Runtime)).ToList()
                                        : moviesToWatch.OrderByDescending(m => GetRuntimeInMinutes(m.Runtime)).ToList(); break;
            case "BoxOffice":
                moviesToWatch = sortAsc ? moviesToWatch.OrderBy(m => ConvertToBoxOfficeValue(m.BoxOffice)).ToList()
                                    : moviesToWatch.OrderByDescending(m => ConvertToBoxOfficeValue(m.BoxOffice)).ToList(); break;
        }
        StateHasChanged();
    }

    private string RatingNotAvailableCheck(string imdbRating)
    {
        // Treat "N/A" as the lowest value
        if (imdbRating == "N/A")
        {
            return "0.0";
        }
        return imdbRating;
    }

    private DateTime ConvertToDateTime(string dateString)
    {
        if (DateTime.TryParseExact(dateString, "dd MMM yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result))
        {
            return result;
        }
        // Return DateTime.MinValue if parsing fails
        return DateTime.MinValue;
    }

    private int GetRuntimeInMinutes(string runtime)
    {
        // Extract the numerical part of the runtime string and convert it to an integer
        if (int.TryParse(new string(runtime.Where(char.IsDigit).ToArray()), out int minutes))
        {
            return minutes;
        }
        return 0; // Return 0 if parsing fails
    }

    private static long ConvertToBoxOfficeValue(string boxOffice)
    {
        if (string.IsNullOrWhiteSpace(boxOffice))
        {
            return 0;
        }

        // Remove non-numeric characters and parse the value
        if (long.TryParse(boxOffice.Replace("$", "").Replace(",", ""), out var result))
        {
            return result;
        }

        return 0;
    }

    private string RenderSortIcon(string column)
    {
        if (sortBy == column)
        {
            return sortAsc ? "🔼" : "🔽"; // Up arrow for ascending, down arrow for descending
        }
        return string.Empty;
    }

    private void MovieDetails(Movie movie)
    {
        navigation.NavigateTo($"/moviepage/{movie.imdbID}");
    }
}