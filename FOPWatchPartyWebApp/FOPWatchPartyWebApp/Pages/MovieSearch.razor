@page "/moviesearch"
@using ClassLibrary.Models;
@using System.Text.Json;
@using System.Text;
@using System.Net;
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject NavigationManager Navigation

<link rel="stylesheet" href="/css/movieSearch.css" />

<PageTitle>Search for Movie</PageTitle>

<h1>Search for Movie</h1>

<form @onsubmit="SearchForMovie">
    <InputText @bind-Value="movieTitle" />
</form>

@if (movies == null)
{
}
else
{
    @if (movies.Count > 0)
    {
        <div class="movie-container">
            @foreach (var movie in movies)
            {
                <div class="movie-item">
                    <img src="@movie.Poster" @onclick="() => MovieDetails(movie)" />
                    <div class="movie-details">
                        <div class="movie-title" @onclick="() => MovieDetails(movie)">@movie.Title</div>
                        <div class="movie-year">@movie.Year</div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>Loading...</p>
    }
}



@code {
    private string movieTitle = "";
    private List<Movie>? movies;
    private Movie? movie;

    private async Task SearchForMovie()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(movieTitle))
            {
                movies = new List<Movie>();
                Root root = await httpClient.GetFromJsonAsync<Root>($"https://localhost:7055/api/movies/search/{movieTitle}");

                foreach (Search search in root.Search)
                {
                    var newMovie = new Movie
                        {
                            Title = search.Title,
                            Year = search.Year,
                            imdbID = search.imdbID,
                            Poster = search.Poster == "N/A" ? "https://i.imgur.com/l1wt1eN.jpg" : search.Poster
                        };
                    movies.Add(newMovie);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movie data: {ex.Message}");
        }
    }

    private async Task AddMovieToWatchlist(Movie movie)
    {
        try
        {
            if (movie != null)
            {
                var response = await httpClient.PostAsync($"https://localhost:7055/api/watchlist/add?imdbID={movie.imdbID}", null);

                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("showDialog", "Movie has been added to the watchlist");
                }
                else if (response.StatusCode == HttpStatusCode.Conflict)
                {
                    await JSRuntime.InvokeVoidAsync("showDialog", "Movie is already in the watchlist");
                }
                else
                {
                    Console.WriteLine($"Error adding movie to the watchlist. Status code: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding movie to the watchlist: {ex.Message}");
        }
    }


    private void MovieDetails(Movie movie)
    {
        Navigation.NavigateTo($"/moviepage/{movie.imdbID}");
    }
}

<script>
    function showDialog(message) {
        alert(message);
    }
</script>
