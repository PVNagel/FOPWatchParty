@page "/moviesearch/{movieSearch}"
@using System.Net;
@using ClassLibrary.Models;

@inject HttpClient httpClient
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime

<h1 class="search-heading">Search for Movie</h1>

<form class="search-form" @onsubmit="SearchForMovie">
    <InputText class="search-input" @bind-Value="movieSearch" />
    <button type="submit" class="search-button">Search</button>
</form>

@if (movies.Count > 0)
{
    <div class="movie-container">
        @foreach (var movie in movies)
        {
            <div class="movie-item">
                <img src="@movie.Poster" class="movie-poster" @onclick="() => MovieDetails(movie)" />
                <div class="movie-details">
                    <div class="movie-title" @onclick="() => MovieDetails(movie)">@movie.Title</div>
                    <div class="movie-year">@movie.Year</div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p class="loading-message">Loading...</p>
}

@code {
    [Parameter]
    public string movieSearch { get; set; }
    private List<Movie>? movies = new List<Movie>();
    private Movie? movie;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(movieSearch))
        {
            await SearchForMovie();
        }
    }

    private async Task SearchForMovie()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(movieSearch))
            {
                movies = new List<Movie>();
                Root root = await httpClient.GetFromJsonAsync<Root>($"https://localhost:7055/api/movies/search/{movieSearch}");

                foreach (Search search in root.Search)
                {
                    var newMovie = new Movie
                        {
                            Title = search.Title,
                            Year = search.Year,
                            imdbID = search.imdbID,
                            Poster = search.Poster == "N/A" ? "https://i.imgur.com/l1wt1eN.jpg" : search.Poster
                        };
                    movies.Add(newMovie);
                }
                navigation.NavigateTo($"/moviesearch/{movieSearch}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movie data: {ex.Message}");
        }
    }

    private async Task AddMovieToWatchlist(Movie movie)
    {
        try
        {
            if (movie != null)
            {
                var response = await httpClient.PostAsync($"https://localhost:7055/api/watchlist/add?imdbID={movie.imdbID}", null);

                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("showConfirmationDialog", "Movie has been added to the watchlist");
                }
                else if (response.StatusCode == HttpStatusCode.Conflict)
                {
                    await JSRuntime.InvokeVoidAsync("showConfirmationDialog", "Movie is already in the watchlist");
                }
                else
                {
                    Console.WriteLine($"Error adding movie to the watchlist. Status code: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding movie to the watchlist: {ex.Message}");
        }
    }

    private void MovieDetails(Movie movie)
    {
        navigation.NavigateTo($"/moviepage/{movie.imdbID}");
    }
}

<script>
    function showConfirmationDialog(message) {
        alert(message);
    }
</script>