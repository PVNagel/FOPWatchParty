// <auto-generated />
using FOPMovieAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FOPMovieAPI.Migrations
{
    [DbContext(typeof(FOPDbContext))]
    [Migration("20231207150328_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassLibrary.Models.FopUser", b =>
                {
                    b.Property<string>("Sub")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sub");

                    b.ToTable("FopUsers");
                });

            modelBuilder.Entity("ClassLibrary.Models.FopUserWatchlist", b =>
                {
                    b.Property<int>("FopUserWatchlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FopUserWatchlistId"));

                    b.Property<string>("FopUserSub")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsInterested")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Sub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FopUserWatchlistId");

                    b.HasIndex("FopUserSub");

                    b.HasIndex("MovieId");

                    b.ToTable("FopUserWatchlists");
                });

            modelBuilder.Entity("ClassLibrary.Models.WatchedMovie", b =>
                {
                    b.Property<int>("WatchedMovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchedMovieId"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("WatchedMovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("WatchedMovies");
                });

            modelBuilder.Entity("ClassLibrary.Models.WatchlistMovie", b =>
                {
                    b.Property<int>("WatchlistMovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchlistMovieId"));

                    b.Property<bool>("IsInterested")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("WatchlistMovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Watchlist");
                });

            modelBuilder.Entity("Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Actors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Awards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BestQuote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoxOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CanRemakeAsNetflixSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DVD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FopRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunniestQuote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metascore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OneOscar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Production")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Released")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Runtime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Writer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imdbID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imdbRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imdbVotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ClassLibrary.Models.FopUserWatchlist", b =>
                {
                    b.HasOne("ClassLibrary.Models.FopUser", "FopUser")
                        .WithMany()
                        .HasForeignKey("FopUserSub");

                    b.HasOne("Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FopUser");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ClassLibrary.Models.WatchedMovie", b =>
                {
                    b.HasOne("Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ClassLibrary.Models.WatchlistMovie", b =>
                {
                    b.HasOne("Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });
#pragma warning restore 612, 618
        }
    }
}
